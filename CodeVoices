#pip install tkinter
#pip install openai-whisper
#pip install edge-tts
#pip install soundfile numpy


import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import ttk
import threading
import os

import whisper
import edge_tts
import asyncio
import tempfile

class VoiceTransformerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Voice Transformer by Viaja Tech")
        self.create_widgets()
        self.model = None
        self.voices = []
        self.load_voices()

    def create_widgets(self):
        # Seleccionar archivo de voz
        ttk.Label(self.root, text="Selecciona tu archivo de voz:").grid(column=0, row=0, padx=10, pady=10, sticky='W')
        self.source_voice_path = tk.StringVar()
        ttk.Entry(self.root, textvariable=self.source_voice_path, width=50).grid(column=1, row=0, padx=10, pady=10)
        ttk.Button(self.root, text="Buscar", command=self.browse_source_voice).grid(column=2, row=0, padx=10, pady=10)

        # Seleccionar voz objetivo
        ttk.Label(self.root, text="Selecciona la voz objetivo:").grid(column=0, row=1, padx=10, pady=10, sticky='W')
        self.target_voice = tk.StringVar()
        self.voice_combo = ttk.Combobox(self.root, textvariable=self.target_voice, values=[], state='readonly', width=48)
        self.voice_combo.grid(column=1, row=1, padx=10, pady=10)
        self.voice_combo['values'] = ['Cargando voces...']
        self.voice_combo.current(0)

        # Seleccionar ubicación para guardar el audio
        ttk.Label(self.root, text="Selecciona la ubicación para guardar el resultado:").grid(column=0, row=2, padx=10, pady=10, sticky='W')
        self.output_path = tk.StringVar()
        ttk.Entry(self.root, textvariable=self.output_path, width=50).grid(column=1, row=2, padx=10, pady=10)
        ttk.Button(self.root, text="Guardar en", command=self.save_output_file).grid(column=2, row=2, padx=10, pady=10)

        # Botón para iniciar la conversión
        self.convert_button = ttk.Button(self.root, text="Convertir Voz", command=self.start_conversion, state='disabled')
        self.convert_button.grid(column=1, row=3, padx=10, pady=20)

        # Etiqueta de progreso
        self.progress_label = ttk.Label(self.root, text="Cargando voces...")
        self.progress_label.grid(column=1, row=4, padx=10, pady=10)

    def browse_source_voice(self):
        filename = filedialog.askopenfilename(
            title="Selecciona tu archivo de voz",
            filetypes=[("Archivos de Audio", "*.wav *.mp3 *.flac *.m4a")]
        )
        self.source_voice_path.set(filename)

    def save_output_file(self):
        filename = filedialog.asksaveasfilename(
            defaultextension=".mp3",
            filetypes=[("Archivos MP3", "*.mp3"), ("Archivos WAV", "*.wav")]
        )
        self.output_path.set(filename)

    def start_conversion(self):
        # Ejecutar la conversión en un hilo separado para no bloquear la GUI
        threading.Thread(target=self.convert_voice).start()

    def load_voices(self):
        # Cargar la lista de voces disponibles en un hilo separado
        threading.Thread(target=self.load_voices_async).start()

    def load_voices_async(self):
        try:
            self.update_progress("Cargando voces disponibles...")
            voices = asyncio.run(edge_tts.list_voices())
            self.voices = sorted(voices, key=lambda x: x['ShortName'])
            voice_names = [f"{v['ShortName']} - {v['Gender']} - {v['Locale']}" for v in self.voices]
            # Actualizar el combobox desde el hilo principal
            self.root.after(0, self.update_voice_combo, voice_names)
        except Exception as e:
            self.update_progress("")
            messagebox.showerror("Error", f"Ocurrió un error al cargar las voces:\n{str(e)}")

    def update_voice_combo(self, voice_names):
        self.voice_combo['values'] = voice_names
        self.voice_combo.current(0)  # Seleccionar la primera voz por defecto
        self.update_progress("")
        self.convert_button['state'] = 'normal'  # Habilitar el botón de convertir voz

    def convert_voice(self):
        source_path = self.source_voice_path.get()
        output_path = self.output_path.get()
        selected_voice = self.target_voice.get()

        if not source_path:
            messagebox.showerror("Error", "Por favor, selecciona tu archivo de voz.")
            return

        if not selected_voice or selected_voice == 'Cargando voces...':
            messagebox.showerror("Error", "Por favor, espera a que las voces se carguen o selecciona una voz.")
            return

        if not output_path:
            messagebox.showerror("Error", "Por favor, selecciona la ubicación para guardar el resultado.")
            return

        try:
            # Obtener el ShortName de la voz seleccionada
            voice_short_name = selected_voice.split(" - ")[0]

            self.update_progress("Cargando modelo de transcripción...")
            if not self.model:
                self.model = whisper.load_model("base")

            self.update_progress("Transcribiendo audio...")
            result = self.model.transcribe(source_path)
            transcription = result['text']

            if not transcription.strip():
                self.update_progress("")
                messagebox.showerror("Error", "No se pudo transcribir el audio. Asegúrate de que el audio tenga habla clara.")
                return

            self.update_progress("Sintetizando voz objetivo...")

            async def synthesize():
                communicate = edge_tts.Communicate(text=transcription, voice=voice_short_name)
                with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
                    await communicate.save(tmp_file.name)
                    tmp_file_path = tmp_file.name

                # Mover el archivo temporal al destino seleccionado
                os.replace(tmp_file_path, output_path)

            asyncio.run(synthesize())

            self.update_progress("")
            messagebox.showinfo("Éxito", f"Voz convertida y guardada en:\n{output_path}")

        except Exception as e:
            self.update_progress("")
            messagebox.showerror("Error", f"Ocurrió un error durante la conversión:\n{str(e)}")

    def update_progress(self, message):
        self.progress_label.config(text=message)
        self.root.update_idletasks()

if __name__ == "__main__":
    root = tk.Tk()
    app = VoiceTransformerApp(root)
    root.mainloop()
