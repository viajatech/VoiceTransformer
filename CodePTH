#git clone https://github.com/RVC-Project/Retrieval-based-Voice-Conversion-WebUI.git
#pip install -r requirements.txt




import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import ttk
import threading
import os
import sys
import subprocess

class VoiceConversionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Conversor de Voz por Viaja Tech")
        self.create_widgets()
        self.is_converting = False

    def create_widgets(self):
        ttk.Label(self.root, text="Selecciona tu archivo de voz:").grid(column=0, row=0, padx=10, pady=5, sticky='W')
        self.source_voice_path = tk.StringVar()
        ttk.Entry(self.root, textvariable=self.source_voice_path, width=50).grid(column=1, row=0, padx=10, pady=5)
        ttk.Button(self.root, text="Buscar", command=self.browse_source_voice).grid(column=2, row=0, padx=10, pady=5)

        ttk.Label(self.root, text="Selecciona el modelo de voz objetivo:").grid(column=0, row=1, padx=10, pady=5, sticky='W')
        self.model_path = tk.StringVar()
        ttk.Entry(self.root, textvariable=self.model_path, width=50).grid(column=1, row=1, padx=10, pady=5)
        ttk.Button(self.root, text="Buscar", command=self.browse_model_path).grid(column=2, row=1, padx=10, pady=5)

        ttk.Label(self.root, text="Selecciona la ubicación para guardar el resultado:").grid(column=0, row=2, padx=10, pady=5, sticky='W')
        self.output_path = tk.StringVar()
        ttk.Entry(self.root, textvariable=self.output_path, width=50).grid(column=1, row=2, padx=10, pady=5)
        ttk.Button(self.root, text="Guardar en", command=self.save_output_file).grid(column=2, row=2, padx=10, pady=5)

        ttk.Button(self.root, text="Convertir Voz", command=self.start_conversion).grid(column=1, row=3, padx=10, pady=20)

        self.progress_label = ttk.Label(self.root, text="")
        self.progress_label.grid(column=1, row=4, padx=10, pady=5)

    def browse_source_voice(self):
        filename = filedialog.askopenfilename(
            title="Selecciona tu archivo de voz",
            filetypes=[("Archivos de Audio", "*.wav *.mp3 *.flac *.m4a")]
        )
        self.source_voice_path.set(filename)

    def browse_model_path(self):
        filename = filedialog.askopenfilename(
            title="Selecciona el modelo de voz objetivo (archivo .pth)",
            filetypes=[("Archivos de Modelo", "*.pth")]
        )
        self.model_path.set(filename)

    def save_output_file(self):
        filename = filedialog.asksaveasfilename(
            defaultextension=".wav",
            filetypes=[("Archivos WAV", "*.wav")]
        )
        self.output_path.set(filename)

    def start_conversion(self):
        if not self.is_converting:
            threading.Thread(target=self.convert_voice).start()

    def convert_voice(self):
        self.is_converting = True
        source_path = self.source_voice_path.get()
        model_path = self.model_path.get()
        output_path = self.output_path.get()

        if not source_path or not model_path or not output_path:
            messagebox.showerror("Error", "Por favor, completa todos los campos.")
            self.is_converting = False
            return

        self.update_progress("Iniciando conversión...")
        try:
            # Construir el comando para ejecutar el script de inferencia
            command = [
                sys.executable,
                "inference_main.py",
                "-i", source_path,
                "-m", model_path,
                "-o", output_path,
                "-fm", "crepe",
                "-c", "0",
                "-f0p", "pm",
                "-a", "0",
                "-s", "0"
            ]

            # Ejecutar el comando
            process = subprocess.Popen(
                command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=os.getcwd()
            )

            # Leer la salida
            while True:
                output = process.stdout.readline()
                if output:
                    self.update_progress(output.strip().decode('utf-8'))
                else:
                    break

            stderr_output = process.stderr.read().decode('utf-8')
            if stderr_output:
                self.update_progress(stderr_output)

            process.wait()
            if process.returncode == 0:
                self.update_progress("Conversión completada.")
                messagebox.showinfo("Éxito", f"Voz convertida y guardada en:\n{output_path}")
            else:
                self.update_progress("Error en la conversión.")
                messagebox.showerror("Error", f"Error durante la conversión:\n{stderr_output}")

        except Exception as e:
            self.update_progress("Error en la conversión.")
            messagebox.showerror("Error", f"Ocurrió un error durante la conversión:\n{str(e)}")
        finally:
            self.is_converting = False
            self.update_progress("")

    def update_progress(self, message):
        self.progress_label.config(text=message)
        self.root.update_idletasks()

if __name__ == "__main__":
    root = tk.Tk()
    app = VoiceConversionApp(root)
    root.mainloop()
